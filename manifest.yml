apiVersion: v1
data:
  BG_COLOR: teal
  MONGO_HOST: mongo
  MONGO_PORT: "27017"
  MONGO_USERNAME: root
  MONGO_PASSWORD: example
  FAIL_FLAG: "false"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: application
---
apiVersion: v1
data:
  MONGO_USERNAME: cm9vdA==
  MONGO_PASSWORD: ZXhhbXBsZQ==
kind: Secret
metadata:
  creationTimestamp: null
  name: mongo
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJhbGVqYW5kcm9zb2xmIiwicGFzc3dvcmQiOiJDYW1hcm85OC4iLCJlbWFpbCI6InNvbGlzX2FsZXg5OEBob3RtYWlsLmNvbSIsImF1dGgiOiJZV3hsYW1GdVpISnZjMjlzWmpwRFlXMWhjbTg1T0M0PSJ9fX0=
kind: Secret
metadata:
  creationTimestamp: null
  name: regcreds
type: kubernetes.io/dockerconfigjson
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: application
  labels:
    app: application
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: application
  template:
    metadata:
      labels:
        app: application
    spec:
      initContainers:
      - name: wait-for-mongo
        image: busybox
        command: ['sh', '-c', 'until nc -z mongo-0.mongo 27017; do echo waiting for mongo; sleep 2; done;']
      containers:
      - name: application
        image: alejandrosolf/asolis_application:latest
        ports:
        - containerPort: 5000
        resources:
          requests:
            memory: "64Mi"
            cpu: "200m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        envFrom:
        - configMapRef:
            name: application
      imagePullSecrets:
      - name: regcreds
---
apiVersion: v1
kind: Service
metadata:
  name: application
spec:
  selector:
    app: application
  ports:
  - protocol: TCP
    port: 80
    targetPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    app: mongo
spec:
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
  selector:
    app: mongo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: "mongo"
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo
              key: MONGO_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo
              key: MONGO_PASSWORD
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx
spec:
  ingressClassName: "nginx"
  rules:
  - host: "asolis.application.com"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: application
            port:
              number: 80
